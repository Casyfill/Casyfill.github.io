<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>City fish</title><link href="/" rel="alternate"></link><link href="/feeds/all-en.atom.xml" rel="self"></link><id>/</id><updated>2016-04-22T00:00:00-04:00</updated><entry><title>Dashboard up and running. Part I</title><link href="/dashboard-up-and-running-part-i.html" rel="alternate"></link><updated>2016-04-22T00:00:00-04:00</updated><author><name>Philipp Kats</name></author><id>tag:,2016-04-22:dashboard-up-and-running-part-i.html</id><summary type="html">&lt;p&gt;In many cases you want to publish either results of your work, documentation or specific tool in the web. While there are tons of hosting servicces, it is quite convenient to start publishing your static pages, e.g. all html, css and javascript is pre-generated. THis does not mean that data is required to be static: you can point to the outer source of data (which is the best practice anyway).&lt;/p&gt;
&lt;p&gt;Among other advantages of this approach, most useful is that it fully copy with "Continious integration" idea, â€” you can constantly add new features and work on your project, while (either all or selected) commits will be automatically broadcasted.&lt;/p&gt;
&lt;p&gt;There are two main options of publshing on github: &lt;code&gt;project gh-pages&lt;/code&gt; and &lt;code&gt;account page&lt;/code&gt;. Obviously, there is room for only one account page, so lets stick with gh-pages. &lt;/p&gt;
&lt;p&gt;So, let's do it:&lt;/p&gt;
&lt;h3&gt;1. create a repo&lt;/h3&gt;
&lt;p&gt;Start with &lt;code&gt;git init&lt;/code&gt; in the project folder, then create a repository on the github without anything (nor README nor license), and copy the second option code from new github repo to your command line and execute. check Github.&lt;/p&gt;
&lt;p&gt;OR create a repo  on the github, and clone 
- &lt;code&gt;git clone your_repo_https_link&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;1. populate with content&lt;/h3&gt;
&lt;h3&gt;1. create a gh-pages orphan branch&lt;/h3&gt;
&lt;h3&gt;1. check if broadcasting works&lt;/h3&gt;
&lt;h3&gt;1. if you need, sync main branch push with gh-pages push. This will make each new edit to be broadcasted&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/5807459/github-mirroring-gh-pages-to-master/7472481#7472481"&gt;source&lt;/a&gt;
Go to the repository &lt;code&gt;.git/config&lt;/code&gt;:
    &lt;code&gt;subl .git/config&lt;/code&gt; or &lt;code&gt;nano .git/config&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Add the following 2 lines to the [remote "origin"] section:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;push = +refs/heads/master:refs/heads/gh-pages
push = +refs/heads/master:refs/heads/master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And you're done!&lt;/p&gt;</summary><category term="github"></category><category term="dashboard"></category></entry><entry><title>Developing the package using __conda__, __sphynx__, and __pyscaffold__</title><link href="/developing-the-package-using-__conda__-__sphynx__-and-__pyscaffold__.html" rel="alternate"></link><updated>2016-04-21T00:00:00-04:00</updated><author><name>Philipp Kats</name></author><id>tag:,2016-04-21:developing-the-package-using-__conda__-__sphynx__-and-__pyscaffold__.html</id><summary type="html">&lt;p&gt;Creating a module might be tedious, especially if we want to test and document it. Fortunately, there is a large set of tools and services that helps us to copy with such a task, installed properly. In fact, once package deployed correctly, everything else is very simple.&lt;/p&gt;
&lt;p&gt;This memo is compiled partly from presentation and tutorial by Mohit Sharma, and several other sources, like &lt;a href="http://uoa-eresearch.github.io/eresearch-cookbook/recipe/2014/11/20/conda/"&gt;this&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;I. Creating conda environment&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;go to the project folder&lt;/li&gt;
&lt;li&gt;create env: &lt;code&gt;conda create -n yourenvname python=x.x anaconda&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;activate env: &lt;code&gt;source activate yourenvname&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;install packages: ``&lt;ul&gt;
&lt;li&gt;sphinx: &lt;code&gt;conda install -n yourenvname sphinx&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;pyscaffold: &lt;code&gt;conda install -n yourenvname -c https://conda.anaconda.org/ioos pyscaffold&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;setuptools: &lt;code&gt;conda install -n project setuptools&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can also add &lt;a href="https://tox.readthedocs.org/en/latest/"&gt;Tox&lt;/a&gt; as integration.&lt;/p&gt;
&lt;h2&gt;II. Create sceleton&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;lets generate module seceleton directory: &lt;code&gt;putup -l 'mit' project  --with-travis&lt;/code&gt;. Skeleton in this case starts with git initialized and test folder preapared for Travis integration.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;III. Documentation&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;go to the folder&lt;/li&gt;
&lt;li&gt;run &lt;code&gt;sphinx-quickstart&lt;/code&gt; to generate html documentation&lt;/li&gt;
&lt;li&gt;more info &lt;a href="http://www.sphinx-doc.org/en/stable/tutorial.html"&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;IV. Git Repository and Integration&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;now you can create repository on the gitHub and connect to local environment&lt;/li&gt;
&lt;li&gt;to syncronise your repo with travis, comment line31, 32 in &lt;code&gt;tests/travis_install.sh&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;setup coverall&lt;/li&gt;
&lt;li&gt;enjoy (and start checking the documentation)&lt;/li&gt;
&lt;/ul&gt;</summary><category term="CI"></category><category term="travisCI"></category><category term="conda"></category><category term="pyscaffold"></category></entry></feed>